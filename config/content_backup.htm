<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>HW</h1>
<h2>w5</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/406d873f93b994ceb0efe39e16369950/raw/2258883030400588fe67dbf2c7b5b8c1412b8624/password_genrator.py"><span style="vertical-align: inherit;">password generator.py</span></a></p>
<h2>w6</h2>
<div>
<pre><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/05b4127a69e8f385fafb39a7fde428ce/raw/8c45a3cef17116c18ca3e632ef2478e075e83f59/ssr">Fetch personal page</a></pre>
</div>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/d62b2f493885106af97f0ad20cfcc788/raw/752939275a6204f55373a3932e209819a74bd816/%25E6%258A%25BD%25E9%25BB%259E.py">random call</a></p>
<h2>w10</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/bdb8334890e086652ea867a68031703d/raw/ea1ede2d1d6dab937434b68d5db47882dd01b0e4/w10">w10hw</a></p>
<p>====================<br/>以下為 w10 缺考名單:<br/>41123201<br/>41123218<br/>41123225<br/>41123228<br/>41123229<br/>41123234<br/>41123236<br/>41123239<br/>41123240<br/>41123243<br/>41123245<br/>41123246<br/>41123250</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 ast 模組是希望利用其 literal_eval() 將 dict 格式的字串轉為 dict 資料型別
# 以利隨後的取值運算
import ast
# 定義一個函式, 以班級代號字串作為輸入, 可以傳回各班修課學員的學號數列
def get_stud(c_name):
    # 將課程的班級代號字串作為 dict 的 key, 而 2022 fall 的課程代號作為對應值
    # 使用者可以利用班級代號從 courses dict 取出課程代號
    courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}
    # 利用 c_name 從 courses 得到該學期的課程代號
    c = courses[c_name]
    # 利用課程代號從學校教務主機取的該班修課人員名單
    url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + c + "&amp;column=True"
    # 讀出各修課人員資料後, 以跳行符號切割, 得到的 data 為數列
    data = open(url).read().split("\n")
    # 因為最後一筆資料為空字串, 因此利用數列運算將其去除
    stud = data[:-1]
    # get_stud() 函式最後將對應班級的修課人員學號以數列格式傳回
    return stud
# 利用 "1b" 作為輸入從 get_stud() 取出該班修課學員學號數列
cp_stud = get_stud("1b")
# get w10 quiz result
# # 以下為 1b w10 quiz 考試結果的 JSON 檔案
cp_w10_quiz_url = "https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/a6825f13b1bb0b61e09e74dd117729eefe1d947f/20221110_cp1b_w10_quiz.json"
def get_score(url):
    # 利用 open() 與 read() 讀取考試結果 JSON 檔案
    json_data = open(url).read()
    # 利用 ast.literal_eval() 將字串 dict, 轉為程式可用的 dict 資料型別
    big_dict = ast.literal_eval(json_data)
    # 從 big_dict 中, 取出 body 中的 testuser 欄位資料
    data = big_dict["body"]["testuser"]
    # 定義一個空 dict 資料變數, 隨後利用迴圈逐一將學號作為 key, 考試成績為 valude
    # 組成 quiz_dict 的資料內容, 以便之後可以用學號當作輸入, 取得該員考試成績
    quiz_dict = {}
    for i in data:
        # data 資料中的 user_name 為考試學員的帳號, 也就是學號
        stud_id = data[i]["user_name"]
        # data 資料中的 total_score 欄位為考試成績
        # 因為考試成績為字串, 先轉為浮點數後, 再轉為整數
        stud_score = int(float(data[i]["total_score"]))
        # 逐一以學號為 key, 考試成績為對應 value, 將資料放入 quiz_dict
        quiz_dict[stud_id] = stud_score
    # 取得各學員的考試成績 quiz_dict 後, 將資料傳回
    return quiz_dict
# 從考試 JSON 檔案中取得考試結果的字典資料
cp_quiz = get_score(cp_w10_quiz_url)
# 設定一個空數列, 隨後將利用 append() 方法, 將缺考學員學號存入
cp_abs = []
# 從修課學員數列中, 逐一按照學號次序, 以重複迴圈將學號對應至 stud 變數
for stud in cp_stud:
    # 因為缺考學員在考試結果的 dict 中並無資料, 因此利用 try except 進行判斷
    try:
        # 針對 stud 學號, 有考試成績者, 列出其學號與得分
        print(stud, cp_quiz[stud])
    except:
        # 缺考者沒有 quiz 成績, 則在其成績欄位印出"缺"
        print(stud, "缺")
        # 同時將缺考學員學號以 append() 方法逐一置入
        cp_abs.append(stud)
# 列出缺考名單
print("="*20)
print("以下為 w10 缺考名單:")
# 因為 cp_abs 資料為 list, 在此利用 for 迴圈逐一列出
for stud in cp_abs:
    print(stud)</pre>
<p></p>
<h3>w10-2</h3>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/1ce4c5915d8d56dbbd86a2bc6ce8cf23/raw/b033fe945c58edff5169d918c0b151c92a736ede/w10-2">1~10 <span class="Y2IQFc" lang="en">odd number</span></a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for i in range(1, 10, 2):
    print(i,end=" ")</pre>
<p></p>
<h2>w11</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/48b0ae9265d81939308bda5a3478a14b/raw/95c8cc36d1ddb032cf3c295da4fcdff1c4b0334b/w11">w11hw</a></p>
<p>====================<br/>以下為 w11 缺考名單:<br/>41123201<br/>41123218<br/>41123219<br/>41123225<br/>41123240<br/>41123245<br/>41123246</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 ast 模組是希望利用其 literal_eval() 將 dict 格式的字串轉為 dict 資料型別
# 以利隨後的取值運算
import ast
# 定義一個函式, 以班級代號字串作為輸入, 可以傳回各班修課學員的學號數列
def get_stud(c_name):
    # 將課程的班級代號字串作為 dict 的 key, 而 2022 fall 的課程代號作為對應值
    # 使用者可以利用班級代號從 courses dict 取出課程代號
    courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}
    # 利用 c_name 從 courses 得到該學期的課程代號
    c = courses[c_name]
    # 利用課程代號從學校教務主機取的該班修課人員名單
    url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + c + "&amp;column=True"
    # 讀出各修課人員資料後, 以跳行符號切割, 得到的 data 為數列
    data = open(url).read().split("\n")
    # 因為最後一筆資料為空字串, 因此利用數列運算將其去除
    stud = data[:-1]
    # get_stud() 函式最後將對應班級的修課人員學號以數列格式傳回
    return stud
# 利用 "1b" 作為輸入從 get_stud() 取出該班修課學員學號數列
cp_stud = get_stud("1b")
# get w10 quiz result
# # 以下為 1b w11 quiz 考試結果的 JSON 檔案
cp_w10_quiz_url = "https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/8e59f90d8ff4f1ad4fecd4f7ee159f91eb6addf9/cp1b_w11_quiz_result.json"
def get_score(url):
    # 利用 open() 與 read() 讀取考試結果 JSON 檔案
    json_data = open(url).read()
    # 利用 ast.literal_eval() 將字串 dict, 轉為程式可用的 dict 資料型別
    big_dict = ast.literal_eval(json_data)
    # 從 big_dict 中, 取出 body 中的 testuser 欄位資料
    data = big_dict["body"]["testuser"]
    # 定義一個空 dict 資料變數, 隨後利用迴圈逐一將學號作為 key, 考試成績為 valude
    # 組成 quiz_dict 的資料內容, 以便之後可以用學號當作輸入, 取得該員考試成績
    quiz_dict = {}
    for i in data:
        # data 資料中的 user_name 為考試學員的帳號, 也就是學號
        stud_id = data[i]["user_name"]
        # data 資料中的 total_score 欄位為考試成績
        # 因為考試成績為字串, 先轉為浮點數後, 再轉為整數
        stud_score = int(float(data[i]["total_score"]))
        # 逐一以學號為 key, 考試成績為對應 value, 將資料放入 quiz_dict
        quiz_dict[stud_id] = stud_score
    # 取得各學員的考試成績 quiz_dict 後, 將資料傳回
    return quiz_dict
# 從考試 JSON 檔案中取得考試結果的字典資料
cp_quiz = get_score(cp_w10_quiz_url)
# 設定一個空數列, 隨後將利用 append() 方法, 將缺考學員學號存入
cp_abs = []
# 從修課學員數列中, 逐一按照學號次序, 以重複迴圈將學號對應至 stud 變數
for stud in cp_stud:
    # 因為缺考學員在考試結果的 dict 中並無資料, 因此利用 try except 進行判斷
    try:
        # 針對 stud 學號, 有考試成績者, 列出其學號與得分
        print(stud, cp_quiz[stud])
    except:
        # 缺考者沒有 quiz 成績, 則在其成績欄位印出"缺"
        print(stud, "缺")
        # 同時將缺考學員學號以 append() 方法逐一置入
        cp_abs.append(stud)
# 列出缺考名單
print("="*20)
print("以下為 w11 缺考名單:")
# 因為 cp_abs 資料為 list, 在此利用 for 迴圈逐一列出
for stud in cp_abs:
    print(stud)</pre>
<p></p>
<h2>w12</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/8a6022d68fea0d05575f8797048c7265/raw/79f9928b1dc31c780c6f276f6d9cdfed4ab70809/%25E6%2594%259D%25E6%25B0%258F%25E8%25BD%2589%25E8%258F%25AF%25E6%25B0%258F">w12hw</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
f = c*9/5 + 32
c = (f-32)*5/9
'''
c = input("請輸入攝氏溫度值")
c = float(c)
#print(c, type(c))
f=c*9/5+32
print(c,f)</pre>
<p>
<script type="text/python">
from browser import html, document, ajax
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div <= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def complete(request):
    pass
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    url = "http://127.0.0.1:8080/?temp=" + user_input_temp
    ajax.get(url, oncomplete=complete)
    brython_div <= "已經透過 AJAX 採 GET 將溫度輸入值送到 server"
    brython_div <= html.BR()
    brython_div <= user_input_temp
    brython_div <= html.BR()
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
</script>
</p>
<!--
以下為 Flask 伺服器端的程式碼
from flask import Flask, request 
from flask_cors import CORS
  
app = Flask(__name__)
CORS(app)
@app.route('/', methods=['GET'])
def index():
    # 利用 Flask request 取得 GET 模式下的 temp 變數值
    # 若 temp 無值, 則內定為 "30"
    temp = request.args.get('temp', default="30")
    # 當使用者在瀏覽器執行 Brython 程式時, 可以利用 GET 將 temp 變數值傳給 server 端的 Flask Python 程式
    # 若瀏覽器前端採 form 表單取值, 則 Flask 可以 request.form.get() 取值
    return "已經取得 temp: " + str(temp)
  
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)
-->
<p></p>
<h3>w12-1</h3>
<!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
-->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
</script>
<!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--></p>
<!-- 利用 html 建立一個 id="btn1" 的按鈕 -->
<p><button id="btn1">輸入攝氏度</button></p>
<div id="brython_div"></div>
<p>
<script type="text/python">
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div <= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    brython_div <= user_input_temp
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
</script>
</p>
<h2>w13</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/406d873f93b994ceb0efe39e16369950/raw/2258883030400588fe67dbf2c7b5b8c1412b8624/password_genrator.py"><span style="vertical-align: inherit;">password generator.py</span></a></p>
<div>
<pre><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/05b4127a69e8f385fafb39a7fde428ce/raw/8c45a3cef17116c18ca3e632ef2478e075e83f59/ssr">Fetch personal page</a></pre>
</div>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/d62b2f493885106af97f0ad20cfcc788/raw/752939275a6204f55373a3932e209819a74bd816/%25E6%258A%25BD%25E9%25BB%259E.py">random call</a></p>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/bdb8334890e086652ea867a68031703d/raw/ea1ede2d1d6dab937434b68d5db47882dd01b0e4/w10">w10hw</a></p>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/48b0ae9265d81939308bda5a3478a14b/raw/95c8cc36d1ddb032cf3c295da4fcdff1c4b0334b/w11">w11hw</a></p>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/8a6022d68fea0d05575f8797048c7265/raw/79f9928b1dc31c780c6f276f6d9cdfed4ab70809/%25E6%2594%259D%25E6%25B0%258F%25E8%25BD%2589%25E8%258F%25AF%25E6%25B0%258F">w12hw</a></p>
<!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
-->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
</script>
<!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--></p>
<!-- 利用 html 建立一個 id="btn1" 的按鈕 -->
<p><button id="btn1">取使用者輸入</button></p>
<div id="brython_div"></div>
<p>
<script type="text/python">
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div <= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def get_input(env):
    user_input_temp = input("請輸入攝氏溫度值:")
    brython_div <= user_input_temp
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
</script>
</p>
<p></p>
<p><br/><br/></p>
<h2>w14</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/b660fefcb01768037c3a1e9d05d5c615/raw/a4884d4b912ccb40bb33d54e1656d4694660d22b/w14">w14hw</a></p>
<p>====================<br/>以下為 w14 缺考名單:<br/>41123209<br/>41123211<br/>41123218<br/>41123219<br/>41123225<br/>41123227<br/>41123228<br/>41123232<br/>41123236<br/>41123240<br/>41123247</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入 ast 模組是希望利用其 literal_eval() 將 dict 格式的字串轉為 dict 資料型別
# 以利隨後的取值運算
import ast
# 定義一個函式, 以班級代號字串作為輸入, 可以傳回各班修課學員的學號數列
def get_stud(c_name):
    # 將課程的班級代號字串作為 dict 的 key, 而 2022 fall 的課程代號作為對應值
    # 使用者可以利用班級代號從 courses dict 取出課程代號
    courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}
    # 利用 c_name 從 courses 得到該學期的課程代號
    c = courses[c_name]
    # 利用課程代號從學校教務主機取的該班修課人員名單
    url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + c + "&amp;column=True"
    # 讀出各修課人員資料後, 以跳行符號切割, 得到的 data 為數列
    data = open(url).read().split("\n")
    # 因為最後一筆資料為空字串, 因此利用數列運算將其去除
    stud = data[:-1]
    # get_stud() 函式最後將對應班級的修課人員學號以數列格式傳回
    return stud
# 利用 "1b" 作為輸入從 get_stud() 取出該班修課學員學號數列
cp_stud = get_stud("1b")
# get w10 quiz result
# # 以下為 1b w14 quiz 考試結果的 JSON 檔案
cp_w10_quiz_url = "https://gist.githubusercontent.com/mdecycu/9df4b372ac1b7386cf259ced15f1a2b2/raw/a0be253dc36fb3d0d2e1878950dae0b13d07a8f6/2022_1208_cp_w14_1b_quiz.json"
def get_score(url):
    # 利用 open() 與 read() 讀取考試結果 JSON 檔案
    json_data = open(url).read()
    # 利用 ast.literal_eval() 將字串 dict, 轉為程式可用的 dict 資料型別
    big_dict = ast.literal_eval(json_data)
    # 從 big_dict 中, 取出 body 中的 testuser 欄位資料
    data = big_dict["body"]["testuser"]
    # 定義一個空 dict 資料變數, 隨後利用迴圈逐一將學號作為 key, 考試成績為 valude
    # 組成 quiz_dict 的資料內容, 以便之後可以用學號當作輸入, 取得該員考試成績
    quiz_dict = {}
    for i in data:
        # data 資料中的 user_name 為考試學員的帳號, 也就是學號
        stud_id = data[i]["user_name"]
        # data 資料中的 total_score 欄位為考試成績
        # 因為考試成績為字串, 先轉為浮點數後, 再轉為整數
        stud_score = int(float(data[i]["total_score"]))
        # 逐一以學號為 key, 考試成績為對應 value, 將資料放入 quiz_dict
        quiz_dict[stud_id] = stud_score
    # 取得各學員的考試成績 quiz_dict 後, 將資料傳回
    return quiz_dict
# 從考試 JSON 檔案中取得考試結果的字典資料
cp_quiz = get_score(cp_w10_quiz_url)
# 設定一個空數列, 隨後將利用 append() 方法, 將缺考學員學號存入
cp_abs = []
# 從修課學員數列中, 逐一按照學號次序, 以重複迴圈將學號對應至 stud 變數
for stud in cp_stud:
    # 因為缺考學員在考試結果的 dict 中並無資料, 因此利用 try except 進行判斷
    try:
        # 針對 stud 學號, 有考試成績者, 列出其學號與得分
        print(stud, cp_quiz[stud])
    except:
        # 缺考者沒有 quiz 成績, 則在其成績欄位印出"缺"
        print(stud, "缺")
        # 同時將缺考學員學號以 append() 方法逐一置入
        cp_abs.append(stud)
# 列出缺考名單
print("="*20)
print("以下為 w14 缺考名單:")
# 因為 cp_abs 資料為 list, 在此利用 for 迴圈逐一列出
for stud in cp_abs:
    print(stud)</pre>
<p></p>
<h2>w15</h2>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><strong>1.為何學習計算機程式需要建立個人倉儲?</strong></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">儲存檔案資料並且維護，能夠記錄甚麼人在甚麼時間進行改版。</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><strong>2.全球資訊網能夠提供甚麼功能或有什麼優點?</strong></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">網際網路上進行互動和瀏覽器的主要工具，能夠搜尋你想知道的所有事情。</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><strong>3.Replit, stud.cycu.org 與 localhost 分別代表甚麼?</strong></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">Replit:<span>線上程式開發服務</span></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><span>stud.cycu.org:github主機名稱</span></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><span>localhost:在電腦網路中用於表示「此電腦」的主機名。</span></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><span></span></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><strong>4.https, ssh 到底提供使用者那些功能或優點?</strong></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">https:是一種讓訪客在網站輸入任何私人資訊可以獲得保護的安全加密措施。</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">ssh:專為遠端登入會話和其他網路服務提供安全性的協定。</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><strong>5.Brython 與 Python 有甚麼差別?</strong></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">Python為一種程式語言，而Bython能在瀏覽器上利用Python取代JavaScript。</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"><strong>6.夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼?</strong></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">代表我能夠讓想要的位置出現圖形。</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;"></div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">7.<strong>變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼</strong>?</div>
<div style="box-sizing: border-box; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Web', sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; word-spacing: 0px;">程式語言的拼圖</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h2>w16</h2>
<p><a href="https://mdecp2022.github.io/site-S41123216/content/cp2022.html?src=https://gist.githubusercontent.com/S41123216/81496876f50e13ab691398963197217a/raw/cbe4ad1cc962ee74698bb4b9f26bc962439a980a/w16">hw</a></p><h1>cp2022</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<div></div>